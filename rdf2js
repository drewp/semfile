#!/usr/bin/python

"""
http://dannyayers.com/archives/2005/06/25/node-and-arc-diagrams-with-javascript/ is the challenge

http://www.w3.org/2001/02pd/ is very related, but I think mine is
different because I want to recapture the graphviz layout and then do
additional style on the results. Doing the style as more rdf is
probably a great idea, though, so maybe I can reuse a lot.

"""

from __future__ import division
import sys, tempfile, os, shlex
from rdflib import Graph
from optparse import OptionParser

class Jsrender:
    # http://www.decafbad.com/blog/2005/07/02/drag_the_boxes_stretch_the_lines

    offset = 50,50 # pixels from top-left
    scale = 50,80 # pixels per graphviz unit
    def __init__(self):
        self.draw_cmds = ""
        self.html_cmds = ""

    def worldx(self, gx, width=False, _idx=0):
        wx = gx * self.scale[_idx]
        if not width:
            wx = wx + self.offset[_idx]
        return wx
    def worldy(self, gy, height=False):
        return self.worldx(gy, height, 1)

    def rect(self,x,y,w,h):
        """x,y is at the center"""
        self.draw_cmds += "jg.drawRect(%s,%s,%s,%s);\n" % (
            self.worldx(x-width/2),
            self.worldy(y-height/2),
            self.worldx(width,True),
            self.worldy(height,True))
    def label(self,x,y,text,w=None,h=None,textAlign=None):
        """dont know where x,y is"""
        more = ""
        if w is not None:
            more = "width:%spx;height=%spx;text-align:%s;" % (self.worldx(w,True),self.worldy(h,True),textAlign)
        self.html_cmds += '<div style="position:absolute;left:%spx;top:%spx;%s;z-index:2;">%s</div>\n' % (self.worldx(x),self.worldy(y),more,text)

    def polyline(self,xy):
        xs = ",".join([str(self.worldx(float(c))) for c in xy[::2]])
        ys = ",".join([str(self.worldy(float(c))) for c in xy[1::2]])
        self.draw_cmds += "jg.drawPolyline(new Array(%s), new Array(%s));\n" % (xs,ys)

    def output(self):
        return """
<html><head>
<script type="text/javascript" src="wz_jsgraphics.js"></script>
</head><body>
 <script type="text/javascript">
  <!--
   var jg = new jsGraphics();
   %(draw_cmds)s
   jg.paint();
  //-->
 </script>
 %(html_cmds)s
</body></html>
""" % self.__dict__


parser = OptionParser()
parser.add_option("-i","--input-rdf",help="rdf file to read")
parser.add_option("-o","--output-js",help="js file to write")
opts,args = parser.parse_args()

graph = Graph()
graph.load(opts.input_rdf)

dotfile = tempfile.NamedTemporaryFile()
wr = dotfile.write
# format at http://www.graphviz.org/cvs/doc/info/lang.html
wr("""digraph G {

// for dotty
  rankdir=LR;
  ratio=auto;
  mclimit=100; // mincross iterations

// for neato
  epsilon=.1;
  overlap=false;
  len=4.1;
""")
for s,p,o in graph.triples((None,None,None)):
    wr('  "%s" -> "%s" [label="%s"]\n' % (s,o,p))
wr("}\n")
dotfile.flush()

jsr = Jsrender()

for line in os.popen('dot -Tplain %s' % dotfile.name):
    # format at http://www.graphviz.org/cvs/doc/info/output.html#d:plain
    words = shlex.split(line)
    if words[0] == "graph":
        pass
    elif words[0] == "node":
        name,x,y,width,height,label,style,shape,color,fillcolor = words[1:]
        x,y,width,height = map(float, (x,y,width,height))
        jsr.rect(x,y,width,height)
        jsr.label(x - width / 2, y - height / 2, name,
                  width, height, "center")

    elif words[0] == "edge":
        tail,head,n = words[1:4]
        n = int(n)
        xy = map(float,words[4:4 + n * 2])
        if len(words) > 4 + n * 2 + 3: # untested
            label,xl,yl = words[4 + n * 2:4 + n * 2 + 3]
        else:
            label,xl,yl = None,None,None
        style,color = words[-2:]
        jsr.polyline(xy)
        jsr.label(xy[-2],xy[-1],">") # arrowheads :)
        if label is not None:
            jsr.label(float(xl), float(yl), label)
    elif words[0] == "stop":
        break
    else:
        raise ValueError("cannot parse dot line %r" % line)
        
open(opts.output_js, 'w').write(jsr.output())

